name: Python package

on: [push]

jobs:
  build:
    runs-on: ubuntu-16.04
    strategy:
      matrix:
        python-version: [2.7, 3.5, 3.6, 3.7, 3.8]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Get the version
        id: vars
        run: echo ::set-output name=tag::$(echo ${GITHUB_REF##*/})
      - name: Install dependencies
        run: |
          pip install -U -r requirements-dev.txt
      - name: Test
        run: |
          echo "__version__ = '${{steps.vars.outputs.tag}}'" > ./version.py
          python ./test_check_nodes.py
          python ./test_check_pods.py
          pyinstaller check_pods.py --clean --onefile --hidden-import nagiosplugin.platform.posix
          pyinstaller check_nodes.py --clean --onefile --hidden-import nagiosplugin.platform.posix
      - name: Upload Artifacts
        if: ${{ matrix.python-version == '3.8' }}
        uses: actions/upload-artifact@v2
        with:
          name: binaries
          path: dist/*
  release:
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
      - name: Get the version
        id: vars
        run: echo ::set-output name=tag::$(echo ${GITHUB_REF##*/})
      - uses: actions/download-artifact@v2
        with:
          name: binaries
          path: dist/
      - name: ls
        run: |
          ls -la
          ls -la dist/
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.vars.outputs.tag }}
          release_name: Release ${{ steps.vars.outputs.tag }}
          draft: false
          prerelease: false
      - name: Upload Release Asset check_nodes
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/check_nodes
          asset_name: check_nodes
          asset_content_type: application/octet-stream
      - name: Upload Release Asset check_pods
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/check_pods
          asset_name: check_pods
          asset_content_type: application/octet-stream
